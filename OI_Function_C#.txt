private void oi_m()
        {
            string fold = "1";
            StreamWriter sw = new StreamWriter(@"D:\oi\training_data\imerg06B_2010_2013_mo_oi_" + fold + "_xie.csv");
            string[] Neg = File.ReadAllLines(@"D:\idl\Neg.csv");  //the number of equivalent gauges(Neg), is defined to measure the density of the local station network over and near the target grid box.
            string[] valid_grid_lt100km = File.ReadAllLines(@"D:\oi\training_data\grid2Ng0_lt100km_" + fold + ".csv");
            string[] F_data = File.ReadAllLines(@"D:\tsgrid_imerg_mo_warm_V06B.csv");
            string[] valid_grid_lt100km_pairs = File.ReadAllLines(@"D:\oi\training_data\imerg_tsgrid_mo_pairs_lt100km_per30_V06B.csv");
            string[] pairs_idPos = File.ReadAllLines(@"D:\oi\training_data\imerg_tsgrid_mo_pairs_lt100km_per30_V06B.idx");
            //string[] pairs_idPos = File.ReadAllLines(@"D:\oi\training_data\index_imerg_tsgrid_mo_pairs_lt100km_" + fold + "_V06B.idx");
            //Uij_f，Uki_f --the co-correlation of the initial estimation field error.
            //Uij_o --the co-correlation of the observation error.
            //σ_f --the standard deviation of the initial estimation field error.
            //σ_oi, σ_oj --the standard deviation of the observation error.
            //λi,λj --the ratio between the standard deviation of the observation error ( ) and that of the initial estimation error ( ) at point i.
            double Uij_f = 0, Uij_o = 0, Uki_f = 0, σ_oi = 0, σ_oj = 0, σ_f = 0, λi = 0, λj = 0;
            double[] B, W, O, F = null;
            double[,] A;
            string lastGrid = "";
            double currNeg = 0, lastNeg = 0;
            for (int k = 1; k < F_data.Length; k++)
            {
                string[] tmp = F_data[k].Split(',');
                string gridid = tmp[1].Trim();
                string date_gpm = tmp[0].Trim();
                double Fk = Convert.ToSingle(tmp[tmp.Length - 1]);
                if (gridid == lastGrid)
                    currNeg = lastNeg;
                else
                    //obtain Neg
                    for (int p = 0; p < Neg.Length; p++)
                    {
                        string[] tmp_Neg = Neg[p].Split(',');
                        if (tmp_Neg[0] == gridid)
                        {
                            currNeg = Convert.ToSingle(tmp_Neg[tmp_Neg.Length - 1]);
                            break;
                        }
                    }
                double mse = 31.734 * Fk - 97.583;   //σ_sre.xls
                if (mse < 0) mse = 0;
                σ_f = Math.Sqrt(mse) + 1;
                PointF pt_k = new PointF(Convert.ToSingle(tmp[2]), Convert.ToSingle(tmp[3]));

                //Extract valid grid points around target grid points
                string[] valid_grid_100km = GetValidgrid(gridid, valid_grid_lt100km);
                if (valid_grid_100km.Length == 0) continue;
                int n = valid_grid_100km.Length;
                //N valid points have n weight coefficients, n pairs of values
                W = new double[n]; O = new double[n]; F = new double[n]; A = new double[n, n]; B = new double[n];
                try
                {
                    //Calculate weight coefficient
                    for (int i = 0; i < n; i++)
                    {
                        string[] tmp_i = valid_grid_100km[i].Split('@');
                        string id_i = tmp_i[0];
                        PointF pt_i = new PointF(Convert.ToSingle(tmp_i[2]), Convert.ToSingle(tmp_i[1]));
                        double d_ki = CalcDistance(pt_k, pt_i);
                        Uki_f = 0.64898 * Math.Exp(-1 * d_ki / 107.25766) + 0.05369;   //corrDist.opj    Monthly statistics
                        string[] valid_grid_pairs = Get_Validgrid_Pairs(date_gpm, gridid, i, valid_grid_lt100km_pairs, GetIdPos(gridid, pairs_idPos)).Split('-');
                        F[i] = Convert.ToSingle(valid_grid_pairs[0]);
                        O[i] = Convert.ToSingle(valid_grid_pairs[1]);
                        //计算观测误差标准差  月统计值
                        //int num = GetSitenumInValidgrid(id_i);
                        //switch (num)
                        //{
                        //    case 1:
                        //        σ_oi = Math.Sqrt(27.98 * Math.Pow(O[i], 1.0687));
                        //        break;
                        //    case 2:
                        //        σ_oi = Math.Sqrt(34.086 * Math.Pow(O[i], 0.8993));
                        //        break;
                        //    case 3:
                        //        σ_oi = Math.Sqrt(4.413 * Math.Pow(O[i], 1.4819));
                        //        break;
                        //}
                        σ_oi = Math.Sqrt(0.15 + 4.09 * O[i] / (currNeg + 1));
                       
                        λi = σ_oi / σ_f;
                        for (int j = 0; j < n; j++)
                        {
                            string[] tmp_j = valid_grid_100km[j].Split('@');
                            string id_j = tmp_j[0];
                            PointF pt_j = new PointF(Convert.ToSingle(tmp_j[2]), Convert.ToSingle(tmp_j[1]));
                            double d_ij = i == j ? 0 : CalcDistance(pt_i, pt_j);
                            Uij_f = 0.64898 * Math.Exp(-1 * d_ij / 107.25766) + 0.05369;   //corrDist.opj  Monthly statistics
                                                                                           //Uki_f = 0.63743 * Math.Exp(-1 * d_ij / 89.2588) + 0.08168;
                            Uij_o = i == j ? 1 : 0;
                            double obs_j = Convert.ToSingle(Get_Validgrid_Pairs(date_gpm, gridid, j, valid_grid_lt100km_pairs, GetIdPos(gridid, pairs_idPos)).Split('-')[1]);
                            //Calculate the monthly statistical value of standard deviation of observation error
                            //int num2 = GetSitenumInValidgrid(id_j);
                            //switch (num2)
                            //{
                            //    case 1:
                            //        σ_oj = Math.Sqrt(27.98 * Math.Pow(O[i], 1.0687));
                            //        break;
                            //    case 2:
                            //        σ_oj = Math.Sqrt(34.086 * Math.Pow(O[i], 0.8993));
                            //        break;
                            //    case 3:
                            //        σ_oj = Math.Sqrt(4.413 * Math.Pow(O[i], 1.4819));
                            //        break;
                            //}
                            σ_oj = Math.Sqrt(0.15 + 4.09 * obs_j / (currNeg + 1));
                            λj = σ_oj / σ_f;

                            A[i, j] = Uij_f + Uij_o * λi * λj;
                        }
                        B[i] = Uki_f;
                    }
                }
                catch { }
                //Solving linear equations
                var formatProvider = (CultureInfo)CultureInfo.InvariantCulture.Clone();
                formatProvider.TextInfo.ListSeparator = " ";

                //Create coefficient matrix a first
                var matrixA = DenseMatrix.OfArray(A);
                //Create vector b
                var vectorB = new DenseVector(B);

                // 1.Using LU decomposition method to solve
                var resultX = matrixA.LU().Solve(vectorB);
                //Console.WriteLine(@"1. Solution using LU decomposition");
                //Console.WriteLine(resultX.ToString("#0.00\t", formatProvider));
                W = resultX.AsArray();
                //Current grid analysis value
                double Ak = 0, sum_w = 0;
                for (int i = 0; i < n; i++)
                    sum_w += W[i] * (O[i] - F[i]);
                Ak = Fk + sum_w;
                sw.WriteLine(F_data[k] + "," + Ak);
                lastNeg = currNeg;
                lastGrid = gridid;
                Console.WriteLine(F_data[k] + "," + Ak);
            }
            sw.Dispose();
            sw.Close();
            Console.WriteLine("ok");
        }